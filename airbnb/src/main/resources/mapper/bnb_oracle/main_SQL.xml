<!-- ?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
	
<mapper namespace="com.sy.bnb.dao.MainDAO">
	
	<select id="login" parameterType="UserVo" resultType="UserVo">
		SELECT USER_EMAIL, USER_NAME
		FROM USER_TBL
		WHERE USER_EMAIL = #{user_email}
		AND USER_PW = #{user_pw}
	</select>
	
	<insert id="join" parameterType="hashmap">
		INSERT INTO USER_TBL
		VALUES(#{id}, #{pw}, #{name}, #{phone}, 1)
	</insert>
	
	<select id="getTheme" resultType="hashmap">
		SELECT T_ID, T_NAME, T_ICON_ID
		FROM THEME_TBL
	</select>
	
	<select id="searchForTheme" parameterType="string" resultType="LodgingVo">
		SELECT A.L_ID, L_NAME, L_ADDR, PRICE AS basic_price, W_PRICE AS weekend_price, PIC_URL AS main_pic
		FROM (
			SELECT T1.* 
			FROM LODGING_TBL T1
			INNER JOIN LODGING_THEME_TBL T2
			ON T1.L_ID = T2.L_ID
			LEFT OUTER JOIN LODGING_DEL_TBL T3
			ON T1.L_ID = T3.L_ID
			WHERE T3.L_ID IS NULL
			AND T2.T_ID = #{t_id}
		) A
		INNER JOIN LODGING_PIC_TBL B
		ON A.L_ID = B.L_ID
		WHERE PIC_MAIN = '1'
	</select>
	
	<select id="chkId" parameterType="string" resultType="string">
		SELECT decode(max(USER_EMAIL), NULL, 'N', 'Y') AS chk
		FROM USER_TBL
		WHERE USER_EMAIL = #{chkId}
	</select>
	
	<select id="getLodging" parameterType="hashmap" resultType="LodgingVo">
		SELECT A.L_ID, L_NAME, L_ADDR, PRICE AS basic_price, W_PRICE AS weekend_price, PIC_URL AS main_pic
		FROM (
			SELECT T1.L_ID, L_NAME, L_ADDR, PRICE, W_PRICE, BASIC_PERSON, ADD_PERSON
			FROM LODGING_TBL T1
			LEFT OUTER JOIN LODGING_DEL_TBL T2
			ON T1.L_ID = T2.L_ID
			WHERE T2.L_ID IS NULL
		) A
		INNER JOIN LODGING_PIC_TBL B
		ON A.L_ID = B.L_ID
		<if test='checkIn != null and checkOut != null'>
		LEFT OUTER JOIN (
			SELECT L_ID
			FROM (
				SELECT R_ID
				FROM RESERVATION_DETAIL_TBL T1
				WHERE R_DATE BETWEEN TO_DATE(#{checkIn}, 'YY/MM/DD') AND TO_DATE(#{checkOut}, 'YY/MM/DD')
			) T2
			LEFT JOIN RESERVATION_TBL T3
			ON T2.R_ID = T3.R_ID
			GROUP BY L_ID
		) C
		ON A.L_ID = C.L_ID
		</if>
		WHERE PIC_MAIN = '1'
		<if test='sel_val != null'>
		AND L_ADDR LIKE '%' || #{sel_val} || '%'
		</if>
		<if test='input_val != null'>
		AND L_ADDR LIKE '%' || #{input_val} || '%'
		</if>
		<if test='guest_no != null'>
		AND (BASIC_PERSON + ADD_PERSON) >= #{guest_no}
		</if>
		<if test='checkIn != null and checkOut != null'>
		AND C.L_ID IS NULL
		</if>
	</select>
	
	<select id="getAllLodging" resultType="LodgingVo">
		SELECT A.L_ID, L_NAME, L_ADDR, PRICE AS basic_price, W_PRICE AS weekend_price, PIC_URL AS main_pic
		FROM (
			SELECT T1.L_ID, L_NAME, L_ADDR, PRICE, W_PRICE
			FROM LODGING_TBL T1
			LEFT OUTER JOIN LODGING_DEL_TBL T2
			ON T1.L_ID = T2.L_ID
			WHERE T2.L_ID IS NULL
		)A
		INNER JOIN LODGING_PIC_TBL B
		ON A.L_ID = B.L_ID
		WHERE PIC_MAIN = '1'
	</select>
	
	<select id="getLodgingDetail" parameterType="string" resultType="LodgingVo">
		SELECT A.L_ID, A.USER_EMAIL AS USER_EMAIL, L_NAME, L_ADDR, C.S_NAME AS BUILDING_CODE, C.S_ID AS SID, TO_CHAR(CHECKIN, 'HH24:MI') AS CHECKIN, TO_CHAR(CHECKOUT, 'HH24:MI') AS CHECKOUT, BATH_EA, BEDROOM_EA, BED_EA, L_EXP, BASIC_PERSON, ADD_PERSON, PRICE AS BASIC_PRICE, W_PRICE AS WEEKEND_PRICE, DECODE(D.L_ID, NULL, 'ON', 'OFF') AS L_STATE 
		FROM LODGING_TBL A
		INNER JOIN USER_TBL B
		ON A.USER_EMAIL = B.USER_EMAIL
		INNER JOIN STRUCTURE_TBL C
		ON A.S_ID = C.S_ID
		LEFT OUTER JOIN LODGING_DEL_TBL D
		ON A.L_ID = D.L_ID
		WHERE A.L_ID = #{l_id}
	</select>
	
	<select id="getUserInfo" parameterType="string" resultType="UserVo">
		SELECT USER_EMAIL, USER_NAME, USER_PHONE, USER_LVL
		FROM USER_TBL
		WHERE USER_EMAIL = #{user_email}
	</select>
	
	<select id="getLodgingPic" parameterType="string" resultType="string">
		SELECT PIC_URL
		FROM LODGING_TBL A
		INNER JOIN LODGING_PIC_TBL B
		ON A.L_ID = B.L_ID
		WHERE A.L_ID = #{l_id}
	</select>
	
	<select id="getLodgingFacility" parameterType="string" resultType="hashmap">
		SELECT C.F_NAME, C.F_ICON_ID, C.F_ID
		FROM LODGING_TBL A
		INNER JOIN LODGING_FACILITY_TBL B
		ON A.L_ID = B.L_ID
		INNER JOIN FACILITY_TBL C
		ON B.F_ID = C.F_ID
		WHERE A.L_ID = #{l_id}
	</select>
	
	<select id="searchFromTheme" parameterType="string" resultType="LodgingVo">
		SELECT *
		FROM LODGING_TBL A
		INNER JOIN LODGING_THEME_TBL B
		ON A.L_ID = B.L_ID
		WHERE B.T_NAME = #{t_name}
	</select>
	
	<insert id="insertReservation" parameterType="ReservationVo" useGeneratedKeys="true"
			  keyProperty="r_id" keyColumn="r_id">
		<selectKey keyProperty="r_id" resultType="String" order="BEFORE">
			SELECT 'R' || TO_CHAR(NVL(TO_NUMBER(SUBSTR(MAX(R_ID), 2, 3)), 0) +1, 'FM000')
			FROM RESERVATION_TBL
		</selectKey>
		INSERT INTO RESERVATION_TBL(R_ID, USER_EMAIL, L_ID, PERSON, T_DATE)
		VALUES(#{r_id}, #{user_email}, #{l_id}, #{person}, SYSDATE)
	</insert>
	
	<insert id="insertReservationDetail" parameterType="ReservationVo">
		<selectKey keyProperty="rd_id" resultType="String" order="BEFORE">
			SELECT 'RD' || TO_CHAR(NVL(TO_NUMBER(SUBSTR(MAX(RD_ID), 3, 4)), 0) +1, 'FM000')
			FROM RESERVATION_DETAIL_TBL
		</selectKey>
		INSERT INTO RESERVATION_DETAIL_TBL(RD_ID, R_ID, R_DATE)
		VALUES(#{rd_id}, #{r_id}, TO_DATE(#{r_date}, 'YYYY-MM-DD'))
	</insert>
	
	<select id="getReservation" parameterType="string" resultType="ReservationVo">
		SELECT T1.R_ID AS R_ID, USER_EMAIL, L_ID, TO_CHAR(R_DATE, 'YYYY-MM-DD') AS R_DATE, TO_CHAR(PERSON) AS PERSON
		FROM (
			SELECT A.R_ID, USER_EMAIL, L_ID, PERSON, T_DATE, RD_ID, R_DATE
			FROM RESERVATION_TBL A
			INNER JOIN RESERVATION_DETAIL_TBL B 
			ON A.R_ID = B.R_ID
			WHERE L_ID = #{l_id}
		) T1
		LEFT OUTER JOIN RESERVATION_CANCLE_TBL T2
		ON T1.R_ID = T2.R_ID
		WHERE RC_ID IS NULL
	</select>
	
	<select id="getImpossibleDateList" parameterType="string" resultType="string">
		SELECT R_DATE AS DATES
		FROM (
			SELECT A.R_ID, USER_EMAIL, L_ID, PERSON, T_DATE, RD_ID, R_DATE
			FROM RESERVATION_TBL A
			INNER JOIN RESERVATION_DETAIL_TBL B 
			ON A.R_ID = B.R_ID
			WHERE L_ID = #{l_id}
		) T1
		LEFT OUTER JOIN RESERVATION_CANCLE_TBL T2
		ON T1.R_ID = T2.R_ID
		WHERE RC_ID IS NULL
		UNION ALL
		SELECT L_DATE AS DATES
		FROM LODGING_MANAGE_TBL
		WHERE L_ID = #{l_id}
	</select>
	
	<select id="getCity_si" resultType="string">
		SELECT MAX(SI)
		FROM CITY_TBL
		GROUP BY SI
	</select>
	
	<select id="getCity_gu" parameterType="string" resultType="string">
		SELECT MAX(GU)
		FROM CITY_TBL
		WHERE SI = #{si}
		GROUP BY GU
	</select>
	
	<select id="searchCity" parameterType="string" resultType="string">
		SELECT SI || ', ' || GU
		FROM CITY_TBL
		WHERE (
			SI || '' || GU LIKE '%' || #{str} || '%'
			OR SI LIKE '%' || #{str} ||'%'
			OR GU LIKE '%' || #{str} || '%'
		)
		GROUP BY SI, GU
	</select>
	
</mapper-->
	